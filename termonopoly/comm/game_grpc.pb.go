// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/game.proto

package comm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Termonopoly_GameStream_FullMethodName = "/Termonopoly/GameStream"
)

// TermonopolyClient is the client API for Termonopoly service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TermonopolyClient interface {
	GameStream(ctx context.Context, opts ...grpc.CallOption) (Termonopoly_GameStreamClient, error)
}

type termonopolyClient struct {
	cc grpc.ClientConnInterface
}

func NewTermonopolyClient(cc grpc.ClientConnInterface) TermonopolyClient {
	return &termonopolyClient{cc}
}

func (c *termonopolyClient) GameStream(ctx context.Context, opts ...grpc.CallOption) (Termonopoly_GameStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Termonopoly_ServiceDesc.Streams[0], Termonopoly_GameStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &termonopolyGameStreamClient{stream}
	return x, nil
}

type Termonopoly_GameStreamClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type termonopolyGameStreamClient struct {
	grpc.ClientStream
}

func (x *termonopolyGameStreamClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *termonopolyGameStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TermonopolyServer is the server API for Termonopoly service.
// All implementations must embed UnimplementedTermonopolyServer
// for forward compatibility
type TermonopolyServer interface {
	GameStream(Termonopoly_GameStreamServer) error
	mustEmbedUnimplementedTermonopolyServer()
}

// UnimplementedTermonopolyServer must be embedded to have forward compatible implementations.
type UnimplementedTermonopolyServer struct {
}

func (UnimplementedTermonopolyServer) GameStream(Termonopoly_GameStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GameStream not implemented")
}
func (UnimplementedTermonopolyServer) mustEmbedUnimplementedTermonopolyServer() {}

// UnsafeTermonopolyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TermonopolyServer will
// result in compilation errors.
type UnsafeTermonopolyServer interface {
	mustEmbedUnimplementedTermonopolyServer()
}

func RegisterTermonopolyServer(s grpc.ServiceRegistrar, srv TermonopolyServer) {
	s.RegisterService(&Termonopoly_ServiceDesc, srv)
}

func _Termonopoly_GameStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TermonopolyServer).GameStream(&termonopolyGameStreamServer{stream})
}

type Termonopoly_GameStreamServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type termonopolyGameStreamServer struct {
	grpc.ServerStream
}

func (x *termonopolyGameStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *termonopolyGameStreamServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Termonopoly_ServiceDesc is the grpc.ServiceDesc for Termonopoly service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Termonopoly_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Termonopoly",
	HandlerType: (*TermonopolyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GameStream",
			Handler:       _Termonopoly_GameStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/game.proto",
}
